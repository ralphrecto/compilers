open Core.Std
open Async.Std
open Typecheck
open Ir
open Ir_generation
open TestUtil

(* Holistic tests of IR generation.
 * These tests involve writing ASTs at the Xi source level, using
 * the Xi interpreter written by Seung Hee to get the expected value
 * of the code, then generating the corresponding IR code for
 * the Xi AST then using the Java IR interpreter to get the value
 * generated by the IR. These, obviously, should be the same.  *)

(* Define a list of functions in funcs. Call these functions by
 * inserting a list of statements as main_block, which will be
 * stuck in the main function. Do not create a function with the name
 * "main" in wrap_stmts. *)
let wrap_stmts (funcs: Pos.callable list) (main: Pos.stmt list) : Ir.comp_unit =
  failwith "kk"

let main filenames () =
  List.iter ~f:(fun x -> print_endline (x ^ "OCAML")) filenames
  |> return

let () =
  Command.async
    ~summary:"IrGen tests"
    Command.Spec.(
      empty
      +> anon (sequence ("file" %: file))
    )
    (fun xi_sources -> main xi_sources)
  |> Command.run
