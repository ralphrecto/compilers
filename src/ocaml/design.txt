Document your design decisions here so that they are available for everyone to
see. This will be especially important from code generation on since we will
be making more and more decisions and it will be harder to keep track of
everything in our brains.

IR Generation
- IRCall(f,e1,...,en) evaluates to the entries in _RET0, regardless of
whether f returns multiple things or just one thing. This is for
convenience so that expr func calls (which necessarily only return 1
value) do not need to do anything weird like moving stuff from _RET0.
This means that in DeclAsgns with multiple variables, move the first
variable from the IRCall, the second from _RET1, etc.

Assembly
- Java style shifting: for a << b, mod b by word size before shifting

- Treat bools only as the lowest order byte in a word. This way we can
just use byte-wise operations and not worry about properly zeroing out
the rest of the bits, which don't matter (e.g. use setne, sete etc.)

- We assume that abstract assembly generation never uses R13, R14, or R15.

- Consider Move(dest, src) with Temps regarding _ARGi and _RETi.

  If dest = _RETi, then we are the callee returning values to the caller,
  so we stick these in the rdi/rsi/pointers passed as args. The callee
  knows how many return values it has so it knows how many of the passed
  args are pointers. If this function returns n > 2 values, then the
  first (n-2) arguments are pointers, (i.e. first registers then stack
  locations), so look here for where to stick the values.

  If src = _RETi, then we are the caller moving values from the callee
  return. These should be in the allocated multi-return space, which can
  be calculated given the height of the block for passing in arguments
  to functions via the stack in the stackframe is fixed.

  If src = _ARGi, then we are the callee moving passed arguments into
  the appropriate variable temps. If we return n values for n > 2, then
  the first (n-2) arguments to the function are pointers. Thus "_ARG0"
  in this case is actually the (n-2+1)th argument, "_ARG1" the nth, etc. 

  dest = _ARGi is not generated in our IR. 
