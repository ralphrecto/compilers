
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package mjw297;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import mjw297.Ast.*;
import mjw297.XicException.*;
import java.util.Optional;

/** CUP v0.11b 20150326 generated parser.
  */
public class InterfaceParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return Sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public InterfaceParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public InterfaceParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public InterfaceParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\006\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\006\002\000\002\006\003\000\002\014\004" +
    "\000\002\007\005\000\002\007\010\000\002\013\003\000" +
    "\002\013\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\016\005\000\002\016\006\000\002\017" +
    "\005\000\002\010\003\000\002\020\011\000\002\020\007" +
    "\000\002\011\003\000\002\021\007\000\002\024\004\000" +
    "\002\024\005\000\002\022\004\000\002\023\004\000\002" +
    "\025\004\000\002\025\005\000\002\030\005\000\002\031" +
    "\007\000\002\032\005\000\002\033\007\000\002\034\003" +
    "\000\002\034\003\000\002\041\003\000\002\041\004\000" +
    "\002\035\005\000\002\036\003\000\002\036\003\000\002" +
    "\037\002\000\002\037\004\000\002\040\003\000\002\040" +
    "\004\000\002\042\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\004\000\002\045\006\000" +
    "\002\045\005\000\002\045\003\000\002\045\003\000\002" +
    "\050\002\000\002\050\005\000\002\051\005\000\002\051" +
    "\006\000\002\047\002\000\002\047\003\000\002\052\005" +
    "\000\002\052\006\000\002\046\003\000\002\046\004\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\005\000\002\046\006\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\044\004\000\002\044\004\000\002\053\002" +
    "\000\002\053\003\000\002\054\003\000\002\054\005\000" +
    "\002\055\003\000\002\055\005\000\002\056\003\000\002" +
    "\056\005\000\002\057\003\000\002\057\005\000\002\060" +
    "\002\000\002\060\004" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\053\005\001\002\000\006\002\uffd3\053" +
    "\uffd3\001\002\000\004\025\015\001\002\000\006\002\uffd5" +
    "\053\uffd5\001\002\000\006\002\uffd4\053\uffd4\001\002\000" +
    "\004\002\013\001\002\000\006\002\uffca\053\005\001\002" +
    "\000\006\002\uffd2\053\uffd2\001\002\000\004\002\001\001" +
    "\002\000\012\002\ufff1\024\040\035\041\053\ufff1\001\002" +
    "\000\010\026\020\033\016\053\021\001\002\000\004\035" +
    "\035\001\002\000\006\026\uff9d\034\uff9d\001\002\000\012" +
    "\002\uffdb\024\uffdb\035\uffdb\053\uffdb\001\002\000\004\035" +
    "\026\001\002\000\006\026\024\034\023\001\002\000\006" +
    "\033\016\053\021\001\002\000\012\002\uffda\024\uffda\035" +
    "\uffda\053\uffda\001\002\000\006\026\uff9c\034\uff9c\001\002" +
    "\000\006\043\032\044\030\001\002\000\016\002\ufffe\024" +
    "\ufffe\026\ufffe\027\ufffe\034\ufffe\053\ufffe\001\002\000\016" +
    "\002\uffff\024\uffff\026\uffff\027\uffff\034\uffff\053\uffff\001" +
    "\002\000\010\026\ufffc\027\033\034\ufffc\001\002\000\016" +
    "\002\000\024\000\026\000\027\000\034\000\053\000\001" +
    "\002\000\004\030\034\001\002\000\016\002\ufffd\024\ufffd" +
    "\026\ufffd\027\ufffd\034\ufffd\053\ufffd\001\002\000\006\043" +
    "\032\044\030\001\002\000\010\026\ufffb\027\033\034\ufffb" +
    "\001\002\000\006\002\uffd7\053\uffd7\001\002\000\006\002" +
    "\ufff0\053\ufff0\001\002\000\006\043\032\044\030\001\002" +
    "\000\012\002\ufff1\024\040\034\044\053\ufff1\001\002\000" +
    "\014\002\uff99\024\uff99\027\033\034\uff99\053\uff99\001\002" +
    "\000\006\043\032\044\030\001\002\000\006\002\uffd6\053" +
    "\uffd6\001\002\000\014\002\uff98\024\uff98\027\033\034\uff98" +
    "\053\uff98\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\014\032\005\033\006\034\003\041\010\042" +
    "\007\001\001\000\002\001\001\000\004\025\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\005\033\006\034\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\036\001\001\000\006\004" +
    "\016\055\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\026\003\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\026\003\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\026\003\042\057\041\001\001\000\004\006" +
    "\044\001\001\000\002\001\001\000\006\002\026\003\045" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$InterfaceParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$InterfaceParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$InterfaceParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        // Don't print anything
    }

    public void report_fatal_error(String message, Object info) throws SyntaxException {
        throw new SyntaxException(-1, -1, message);
    }

	public void syntax_error(Symbol sym) {
        // Don't print anything
	}

    public void unrecovered_syntax_error(Symbol sym) throws SyntaxException {
        throw new SyntaxException(sym.left, sym.right, SymUtil.symToLiteral(sym));
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$InterfaceParser$actions {
    private final InterfaceParser parser;

    /** Constructor */
    CUP$InterfaceParser$actions(InterfaceParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 107. */
    public final java_cup.runtime.Symbol CUP$InterfaceParser$do_action_part00000000(
            int                        CUP$InterfaceParser$act_num,
            java_cup.runtime.lr_parser CUP$InterfaceParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$InterfaceParser$stack,
            int                        CUP$InterfaceParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$InterfaceParser$result;

        /* select the action based on the action number */
        switch (CUP$InterfaceParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= prog EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int start_valright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                XiFile<Position> start_val = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<XiFile<Position>> value();
                RESULT = start_val;
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$InterfaceParser$parser.done_parsing();
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // base_type ::= INT 
            {
                Type<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.peek().left;
                int iright = CUP$InterfaceParser$stack.peek().right;
                Object i = CUP$InterfaceParser$stack.peek().<Object> value();
                 RESULT = Int.of(new Position(ileft, iright)); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("base_type",0, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // base_type ::= BOOL 
            {
                Type<Position> RESULT = null;
                int bleft = CUP$InterfaceParser$stack.peek().left;
                int bright = CUP$InterfaceParser$stack.peek().right;
                Object b = CUP$InterfaceParser$stack.peek().<Object> value();
                 RESULT = Bool.of(new Position(bleft, bright)); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("base_type",0, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // type ::= base_type 
            {
                Type<Position> RESULT = null;
                int btleft = CUP$InterfaceParser$stack.peek().left;
                int btright = CUP$InterfaceParser$stack.peek().right;
                Type<Position> bt = CUP$InterfaceParser$stack.peek().<Type<Position>> value();
                 RESULT = bt; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("type",1, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // type ::= type LBRACKET RBRACKET 
            {
                Type<Position> RESULT = null;
                int tleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int tright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Type<Position> t = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Type<Position>> value();
                 RESULT = Array.of(new Position(tleft, tright), t, Optional.empty()); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("type",1, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // avar ::= ID COLON type 
            {
                AnnotatedVar<Position> RESULT = null;
                int idleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int idright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                String id = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<String> value();
                int tleft = CUP$InterfaceParser$stack.peek().left;
                int tright = CUP$InterfaceParser$stack.peek().right;
                Type<Position> t = CUP$InterfaceParser$stack.peek().<Type<Position>> value();
                 Position p = new Position(idleft, idright);
	   RESULT = AnnotatedId.of(p, Id.of(p, id), t); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("avar",2, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // avar ::= UNDERSCORE COLON type 
            {
                AnnotatedVar<Position> RESULT = null;
                int uleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int uright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Object u = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Object> value();
                int tleft = CUP$InterfaceParser$stack.peek().left;
                int tright = CUP$InterfaceParser$stack.peek().right;
                Type<Position> t = CUP$InterfaceParser$stack.peek().<Type<Position>> value();
                 Position p = new Position(uleft, uright);
	   RESULT = AnnotatedUnderscore.of(p, Underscore.of(p), t); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("avar",2, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // var ::= avar 
            {
                Var<Position> RESULT = null;
                int avleft = CUP$InterfaceParser$stack.peek().left;
                int avright = CUP$InterfaceParser$stack.peek().right;
                AnnotatedVar<Position> av = CUP$InterfaceParser$stack.peek().<AnnotatedVar<Position>> value();
                 RESULT = av; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("var",3, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // var ::= UNDERSCORE 
            {
                Var<Position> RESULT = null;
                int uleft = CUP$InterfaceParser$stack.peek().left;
                int uright = CUP$InterfaceParser$stack.peek().right;
                Object u = CUP$InterfaceParser$stack.peek().<Object> value();
                 RESULT = Underscore.of(new Position(uleft, uright)); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("var",3, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // var ::= ID COLON base_type array_index_plus 
            {
                Var<Position> RESULT = null;
                int idleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).left;
                int idright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).right;
                String id = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).<String> value();
                int btleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int btright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Type<Position> bt = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Type<Position>> value();
                int e_lstleft = CUP$InterfaceParser$stack.peek().left;
                int e_lstright = CUP$InterfaceParser$stack.peek().right;
                ArrayList<Expr<Position>> e_lst = CUP$InterfaceParser$stack.peek().<ArrayList<Expr<Position>>> value();
                 Position p = new Position(idleft, idright);
       Position pArray = new Position(btleft, btright);
	   Expr<Position> first = e_lst.get(e_lst.size() - 1);
	   Type<Position> array_type = Array.of(
	        pArray,
	        bt,
	        first == null ? Optional.empty() : Optional.of(first)
       );
	   for (int i = e_lst.size() - 2; i >= 0; i--) {
	       Expr<Position> current = e_lst.get(i);
           array_type = Array.of(
                pArray,
                array_type,
                current == null ? Optional.empty() : Optional.of(current)
           );
	   }
	   RESULT = AnnotatedId.of(p, Id.of(p, id), array_type);
    
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("var",3, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // stmt ::= full_decl 
            {
                Stmt<Position> RESULT = null;
                int fleft = CUP$InterfaceParser$stack.peek().left;
                int fright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> f = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = f; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("stmt",11, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // stmt ::= asgn 
            {
                Stmt<Position> RESULT = null;
                int aleft = CUP$InterfaceParser$stack.peek().left;
                int aright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> a = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = a; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("stmt",11, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // stmt ::= if_stmt 
            {
                Stmt<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.peek().left;
                int iright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> i = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = i; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("stmt",11, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // stmt ::= while_stmt 
            {
                Stmt<Position> RESULT = null;
                int wleft = CUP$InterfaceParser$stack.peek().left;
                int wright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> w = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = w; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("stmt",11, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // stmt ::= proc_call 
            {
                Stmt<Position> RESULT = null;
                int cleft = CUP$InterfaceParser$stack.peek().left;
                int cright = CUP$InterfaceParser$stack.peek().right;
                ProcCall<Position> c = CUP$InterfaceParser$stack.peek().<ProcCall<Position>> value();
                 RESULT = c; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("stmt",11, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // stmt ::= block 
            {
                Stmt<Position> RESULT = null;
                int bleft = CUP$InterfaceParser$stack.peek().left;
                int bright = CUP$InterfaceParser$stack.peek().right;
                Block<Position> b = CUP$InterfaceParser$stack.peek().<Block<Position>> value();
                 RESULT = b; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("stmt",11, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // end_stmt ::= 
            {
                Object RESULT = null;

                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("end_stmt",4, CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // end_stmt ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("end_stmt",4, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // full_stmt ::= stmt end_stmt 
            {
                Stmt<Position> RESULT = null;
                int sleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int sright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Stmt<Position> s = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Stmt<Position>> value();
                 RESULT = s; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("full_stmt",10, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // block ::= LBRACE stmt_star RBRACE 
            {
                Block<Position> RESULT = null;
                int lbleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int lbright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Object lb = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Object> value();
                int sleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int sright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<Stmt<Position>> s = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<Stmt<Position>>> value();
                 Position p = new Position(lbleft, lbright);
	   RESULT = Block.of(p, s, Optional.empty()); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("block",5, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // block ::= LBRACE stmt_star RETURN expr_star end_stmt RBRACE 
            {
                Block<Position> RESULT = null;
                int lbleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-5).left;
                int lbright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-5).right;
                Object lb = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-5).<Object> value();
                int sleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).left;
                int sright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).right;
                ArrayList<Stmt<Position>> s = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).<ArrayList<Stmt<Position>>> value();
                int elleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int elright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<Expr<Position>> el = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<Expr<Position>>> value();
                 Position p = new Position(lbleft, lbright);
	   RESULT = Block.of(p, s, Optional.of(el)); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("block",5, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-5), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // full_decl ::= var_plus 
            {
                Stmt<Position> RESULT = null;
                int vleft = CUP$InterfaceParser$stack.peek().left;
                int vright = CUP$InterfaceParser$stack.peek().right;
                ArrayList<Var<Position>> v = CUP$InterfaceParser$stack.peek().<ArrayList<Var<Position>>> value();
                 RESULT = Decl.of(new Position(vleft, vright), v); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("full_decl",9, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // full_decl ::= var_plus EQ expr 
            {
                Stmt<Position> RESULT = null;
                int vleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int vright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<Var<Position>> v = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<Var<Position>>> value();
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 RESULT = DeclAsgn.of(new Position(vleft, vright), v, e); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("full_decl",9, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // asgn_indexable ::= ID 
            {
                Expr<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.peek().left;
                int iright = CUP$InterfaceParser$stack.peek().right;
                String i = CUP$InterfaceParser$stack.peek().<String> value();
                 RESULT = Id.of(new Position(ileft, iright), i); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("asgn_indexable",8, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // asgn_indexable ::= func_call 
            {
                Expr<Position> RESULT = null;
                int cleft = CUP$InterfaceParser$stack.peek().left;
                int cright = CUP$InterfaceParser$stack.peek().right;
                FuncCall<Position> c = CUP$InterfaceParser$stack.peek().<FuncCall<Position>> value();
                 RESULT = c; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("asgn_indexable",8, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // asgn_indexable ::= STRING 
            {
                Expr<Position> RESULT = null;
                int sleft = CUP$InterfaceParser$stack.peek().left;
                int sright = CUP$InterfaceParser$stack.peek().right;
                String s = CUP$InterfaceParser$stack.peek().<String> value();
                 RESULT = StringLiteral.of(new Position(sleft, sright), s); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("asgn_indexable",8, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // asgn ::= ID EQ expr 
            {
                Stmt<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int iright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                String i = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<String> value();
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(ileft, iright);
	   RESULT = Asgn.of(p, Id.of(p,i), e); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("asgn",12, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // asgn ::= asgn_indexable num_array_index_plus EQ expr 
            {
                Stmt<Position> RESULT = null;
                int aleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).left;
                int aright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).right;
                Expr<Position> a = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).<Expr<Position>> value();
                int idxleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int idxright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<Expr<Position>> idx = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<Expr<Position>>> value();
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(aleft, aright);
	   Index<Position> index = Index.of(p, a, idx.get(0));
	   for (int i = 1; i < idx.size(); i++){
	       index = Index.of(p, index, idx.get(i));
	   }
	   RESULT = Asgn.of(p, index, e);
    
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("asgn",12, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // underscore_asgn ::= UNDERSCORE EQ expr 
            {
                Stmt<Position> RESULT = null;
                int uleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int uright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Object u = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Object> value();
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(uleft, uright);
	   RESULT = UnderscoreAsgn.of(p, Underscore.of(p), e);
	
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("underscore_asgn",13, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // if_body ::= full_stmt 
            {
                Stmt<Position> RESULT = null;
                int sleft = CUP$InterfaceParser$stack.peek().left;
                int sright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> s = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = s; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("if_body",6, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // if_stmt ::= IF LPAREN expr RPAREN if_body ELSE if_body 
            {
                Stmt<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-6).left;
                int iright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-6).right;
                Object i = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-6).<Object> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).<Expr<Position>> value();
                int s1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int s1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Stmt<Position> s1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Stmt<Position>> value();
                int s2left = CUP$InterfaceParser$stack.peek().left;
                int s2right = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> s2 = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = IfElse.of(new Position(ileft, iright), e, s1, s2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("if_stmt",14, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-6), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // if_stmt ::= IF LPAREN expr RPAREN if_body 
            {
                Stmt<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).left;
                int iright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).right;
                Object i = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).<Object> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int sleft = CUP$InterfaceParser$stack.peek().left;
                int sright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> s = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = If.of(new Position(ileft, iright), e, s); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("if_stmt",14, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // while_body ::= full_stmt 
            {
                Stmt<Position> RESULT = null;
                int sleft = CUP$InterfaceParser$stack.peek().left;
                int sright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> s = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = s; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("while_body",7, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // while_stmt ::= WHILE LPAREN expr RPAREN while_body 
            {
                Stmt<Position> RESULT = null;
                int wleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).left;
                int wright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).right;
                Object w = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).<Object> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int bleft = CUP$InterfaceParser$stack.peek().left;
                int bright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> b = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 RESULT = While.of(new Position(wleft, wright), e, b); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("while_stmt",15, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // args_call ::= LPAREN RPAREN 
            {
                ArrayList<Expr<Position>> RESULT = null;
                 RESULT = new ArrayList<>(); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("args_call",18, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // args_call ::= LPAREN expr_plus RPAREN 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<Expr<Position>> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<Expr<Position>>> value();
                 RESULT = e; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("args_call",18, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // func_call ::= ID args_call 
            {
                FuncCall<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int iright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                String i = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<String> value();
                int aleft = CUP$InterfaceParser$stack.peek().left;
                int aright = CUP$InterfaceParser$stack.peek().right;
                ArrayList<Expr<Position>> a = CUP$InterfaceParser$stack.peek().<ArrayList<Expr<Position>>> value();
                 Position p = new Position(ileft, iright);
       RESULT = FuncCall.of(p, Id.of(p, i), a); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("func_call",16, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // proc_call ::= ID args_call 
            {
                ProcCall<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int iright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                String i = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<String> value();
                int aleft = CUP$InterfaceParser$stack.peek().left;
                int aright = CUP$InterfaceParser$stack.peek().right;
                ArrayList<Expr<Position>> a = CUP$InterfaceParser$stack.peek().<ArrayList<Expr<Position>>> value();
                 Position p = new Position(ileft, iright);
       RESULT = ProcCall.of(p, Id.of(p, i), a); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("proc_call",17, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // args_decl ::= LPAREN RPAREN 
            {
                ArrayList<AnnotatedVar<Position>> RESULT = null;
                 RESULT = new ArrayList<AnnotatedVar<Position>>(); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("args_decl",19, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // args_decl ::= LPAREN avar_plus RPAREN 
            {
                ArrayList<AnnotatedVar<Position>> RESULT = null;
                int aleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int aright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<AnnotatedVar<Position>> a = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<AnnotatedVar<Position>>> value();
                 RESULT = a; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("args_decl",19, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // proc_decl ::= ID args_decl block 
            {
                Callable<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int iright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                String i = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<String> value();
                int aleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int aright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<AnnotatedVar<Position>> a = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<AnnotatedVar<Position>>> value();
                int bleft = CUP$InterfaceParser$stack.peek().left;
                int bright = CUP$InterfaceParser$stack.peek().right;
                Block<Position> b = CUP$InterfaceParser$stack.peek().<Block<Position>> value();
                 Position p = new Position(ileft, iright);
       if (b.ret.isPresent() && b.ret.get().size() > 0) {
           report_fatal_error(String.format(
               "error: returning value from a procedure, line %d col %d",
               bleft, bright),
               null
           );
       }
       RESULT = Proc.of(p, Id.of(p, i), a, b);
    
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("proc_decl",22, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // func_decl ::= ID args_decl COLON type_plus block 
            {
                Callable<Position> RESULT = null;
                int fleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).left;
                int fright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).right;
                String f = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).<String> value();
                int aleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).left;
                int aright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).right;
                ArrayList<AnnotatedVar<Position>> a = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).<ArrayList<AnnotatedVar<Position>>> value();
                int tleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int tright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<Type<Position>> t = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<Type<Position>>> value();
                int bleft = CUP$InterfaceParser$stack.peek().left;
                int bright = CUP$InterfaceParser$stack.peek().right;
                Block<Position> b = CUP$InterfaceParser$stack.peek().<Block<Position>> value();
                 Position p = new Position(fleft, fright);
       RESULT = Func.of(p, Id.of(p, f), a, t, b);
    
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("func_decl",23, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // int_proc_decl ::= ID args_decl end_stmt 
            {
                CallableDecl<Position> RESULT = null;
                int ileft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int iright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                String i = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<String> value();
                int aleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int aright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<AnnotatedVar<Position>> a = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<AnnotatedVar<Position>>> value();
                 Position p = new Position(ileft, iright);
       RESULT = ProcDecl.of(p, Id.of(p, i), a);
    
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("int_proc_decl",24, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // int_func_decl ::= ID args_decl COLON type_plus end_stmt 
            {
                CallableDecl<Position> RESULT = null;
                int fleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).left;
                int fright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).right;
                String f = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4).<String> value();
                int aleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).left;
                int aright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).right;
                ArrayList<AnnotatedVar<Position>> a = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).<ArrayList<AnnotatedVar<Position>>> value();
                int tleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int tright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<Type<Position>> t = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<Type<Position>>> value();
                 Position p = new Position(fleft, fright);
       RESULT = FuncDecl.of(p, Id.of(p, f), a, t);
    
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("int_func_decl",25, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // callable_decl ::= int_proc_decl 
            {
                CallableDecl<Position> RESULT = null;
                int pleft = CUP$InterfaceParser$stack.peek().left;
                int pright = CUP$InterfaceParser$stack.peek().right;
                CallableDecl<Position> p = CUP$InterfaceParser$stack.peek().<CallableDecl<Position>> value();
                 RESULT = p; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("callable_decl",26, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // callable_decl ::= int_func_decl 
            {
                CallableDecl<Position> RESULT = null;
                int fleft = CUP$InterfaceParser$stack.peek().left;
                int fright = CUP$InterfaceParser$stack.peek().right;
                CallableDecl<Position> f = CUP$InterfaceParser$stack.peek().<CallableDecl<Position>> value();
                 RESULT = f; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("callable_decl",26, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // callable_decl_plus ::= callable_decl 
            {
                ArrayList<CallableDecl<Position>> RESULT = null;
                int cleft = CUP$InterfaceParser$stack.peek().left;
                int cright = CUP$InterfaceParser$stack.peek().right;
                CallableDecl<Position> c = CUP$InterfaceParser$stack.peek().<CallableDecl<Position>> value();
                 ArrayList<CallableDecl<Position>> cl = new ArrayList<>();
       cl.add(c);
       RESULT = cl; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("callable_decl_plus",31, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // callable_decl_plus ::= callable_decl_plus callable_decl 
            {
                ArrayList<CallableDecl<Position>> RESULT = null;
                int clleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int clright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<CallableDecl<Position>> cl = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<CallableDecl<Position>>> value();
                int cleft = CUP$InterfaceParser$stack.peek().left;
                int cright = CUP$InterfaceParser$stack.peek().right;
                CallableDecl<Position> c = CUP$InterfaceParser$stack.peek().<CallableDecl<Position>> value();
                 cl.add(c);
       RESULT = cl; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("callable_decl_plus",31, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // use_def ::= USE ID end_stmt 
            {
                Use<Position> RESULT = null;
                int uleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int uright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Object u = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Object> value();
                int xleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int xright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                String x = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<String> value();
                 Position p = new Position(uleft, uright);
       Position pId = new Position(xleft, xright);
       RESULT = Use.of(p, Id.of(pId, x)); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("use_def",27, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // func_def ::= func_decl 
            {
                Callable<Position> RESULT = null;
                int fleft = CUP$InterfaceParser$stack.peek().left;
                int fright = CUP$InterfaceParser$stack.peek().right;
                Callable<Position> f = CUP$InterfaceParser$stack.peek().<Callable<Position>> value();
                 RESULT = f; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("func_def",28, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // func_def ::= proc_decl 
            {
                Callable<Position> RESULT = null;
                int pleft = CUP$InterfaceParser$stack.peek().left;
                int pright = CUP$InterfaceParser$stack.peek().right;
                Callable<Position> p = CUP$InterfaceParser$stack.peek().<Callable<Position>> value();
                 RESULT = p; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("func_def",28, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // use_def_star ::= 
            {
                ArrayList<Use<Position>> RESULT = null;
                 RESULT = new ArrayList<Use<Position>>(); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("use_def_star",29, CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // use_def_star ::= use_def_star use_def 
            {
                ArrayList<Use<Position>> RESULT = null;
                int usleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int usright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<Use<Position>> us = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<Use<Position>>> value();
                int uleft = CUP$InterfaceParser$stack.peek().left;
                int uright = CUP$InterfaceParser$stack.peek().right;
                Use<Position> u = CUP$InterfaceParser$stack.peek().<Use<Position>> value();
                 us.add(u);
	   RESULT = us;
    
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("use_def_star",29, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // func_def_plus ::= func_def 
            {
                ArrayList<Callable<Position>> RESULT = null;
                int fleft = CUP$InterfaceParser$stack.peek().left;
                int fright = CUP$InterfaceParser$stack.peek().right;
                Callable<Position> f = CUP$InterfaceParser$stack.peek().<Callable<Position>> value();
                 ArrayList<Callable<Position>> list = new ArrayList<>();
	   list.add(f);
	   RESULT = list;
	
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("func_def_plus",30, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // func_def_plus ::= func_def_plus func_def 
            {
                ArrayList<Callable<Position>> RESULT = null;
                int fsleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int fsright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<Callable<Position>> fs = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<Callable<Position>>> value();
                int fleft = CUP$InterfaceParser$stack.peek().left;
                int fright = CUP$InterfaceParser$stack.peek().right;
                Callable<Position> f = CUP$InterfaceParser$stack.peek().<Callable<Position>> value();
                 fs.add(f);
	   RESULT = fs;
	
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("func_def_plus",30, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // prog ::= callable_decl_plus 
            {
                XiFile<Position> RESULT = null;
                int csleft = CUP$InterfaceParser$stack.peek().left;
                int csright = CUP$InterfaceParser$stack.peek().right;
                ArrayList<CallableDecl<Position>> cs = CUP$InterfaceParser$stack.peek().<ArrayList<CallableDecl<Position>>> value();
                 RESULT = Interface.of(new Position(csleft, csright), cs); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("prog",32, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // expr ::= literal 
            {
                Expr<Position> RESULT = null;
                int lleft = CUP$InterfaceParser$stack.peek().left;
                int lright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> l = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 RESULT = l; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr",35, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // expr ::= binop 
            {
                Expr<Position> RESULT = null;
                int bopleft = CUP$InterfaceParser$stack.peek().left;
                int bopright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> bop = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 RESULT = bop; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr",35, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // expr ::= unop 
            {
                Expr<Position> RESULT = null;
                int uopleft = CUP$InterfaceParser$stack.peek().left;
                int uopright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> uop = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 RESULT = uop; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr",35, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // expr ::= expr num_array_index_plus 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Expr<Position>> value();
                int e_lstleft = CUP$InterfaceParser$stack.peek().left;
                int e_lstright = CUP$InterfaceParser$stack.peek().right;
                ArrayList<Expr<Position>> e_lst = CUP$InterfaceParser$stack.peek().<ArrayList<Expr<Position>>> value();
                 Position p = new Position(e1left, e1right);
	   Expr<Position> exp = Index.of(p, e1, e_lst.get(0));
	   for (int i = 1; i < e_lst.size(); i++) {
	       exp = Index.of(p, exp, e_lst.get(i));
	   }
	   RESULT = exp;
	
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr",35, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // expr ::= LENGTH LPAREN expr RPAREN 
            {
                Expr<Position> RESULT = null;
                int lleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).left;
                int lright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).right;
                Object l = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).<Object> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Expr<Position>> value();
                 RESULT = Length.of(new Position(lleft, lright), e); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr",35, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // expr ::= LPAREN expr RPAREN 
            {
                Expr<Position> RESULT = null;
                int lleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int lright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Object l = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Object> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Expr<Position>> value();
                 RESULT = e; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr",35, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // expr ::= func_call 
            {
                Expr<Position> RESULT = null;
                int cleft = CUP$InterfaceParser$stack.peek().left;
                int cright = CUP$InterfaceParser$stack.peek().right;
                FuncCall<Position> c = CUP$InterfaceParser$stack.peek().<FuncCall<Position>> value();
                 RESULT = c; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr",35, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // expr ::= ID 
            {
                Expr<Position> RESULT = null;
                int idleft = CUP$InterfaceParser$stack.peek().left;
                int idright = CUP$InterfaceParser$stack.peek().right;
                String id = CUP$InterfaceParser$stack.peek().<String> value();
                 RESULT = Id.of(new Position(idleft, idright), id); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr",35, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // empty_array_index_star ::= 
            {
                ArrayList<Expr<Position>> RESULT = null;
                 RESULT = new ArrayList<Expr<Position>>(); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("empty_array_index_star",38, CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // empty_array_index_star ::= empty_array_index_star LBRACKET RBRACKET 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int listleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int listright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<Expr<Position>> list = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<Expr<Position>>> value();
                 list.add(null);
	   RESULT = list;
	
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("empty_array_index_star",38, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // num_array_index_plus ::= LBRACKET expr RBRACKET 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Expr<Position>> value();
                 ArrayList<Expr<Position>> list = new ArrayList<>();
	   list.add(e);
	   RESULT = list; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("num_array_index_plus",39, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // num_array_index_plus ::= num_array_index_plus LBRACKET expr RBRACKET 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int e_lstleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).left;
                int e_lstright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).right;
                ArrayList<Expr<Position>> e_lst = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).<ArrayList<Expr<Position>>> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Expr<Position>> value();
                 e_lst.add(e);
	   RESULT = e_lst; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("num_array_index_plus",39, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // index_contents ::= 
            {
                Expr<Position> RESULT = null;
                 RESULT = null; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("index_contents",37, CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // index_contents ::= expr 
            {
                Expr<Position> RESULT = null;
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 RESULT = e; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("index_contents",37, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // array_index_plus ::= LBRACKET index_contents RBRACKET 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Expr<Position>> value();
                 ArrayList<Expr<Position>> indexList = new ArrayList<>();
       indexList.add(e);
       RESULT = indexList; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("array_index_plus",40, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // array_index_plus ::= array_index_plus LBRACKET index_contents RBRACKET 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int aleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).left;
                int aright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).right;
                ArrayList<Expr<Position>> a = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).<ArrayList<Expr<Position>>> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Expr<Position> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Expr<Position>> value();
                 if (e != null && a.get(a.size() - 1) == null) {
           report_fatal_error(String.format(
               "Invalid array index declaration at row %d, col %d:"
               + "cannot have [] after [expr]", aleft, aright),
               null);
       } else {
           a.add(e);
           RESULT = a;
       }
    
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("array_index_plus",40, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // literal ::= NUM 
            {
                Expr<Position> RESULT = null;
                int nleft = CUP$InterfaceParser$stack.peek().left;
                int nright = CUP$InterfaceParser$stack.peek().right;
                Long n = CUP$InterfaceParser$stack.peek().<Long> value();
                 RESULT = NumLiteral.of(new Position(nleft, nright), n); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("literal",36, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // literal ::= MINUS BIG_NUM 
            {
                Expr<Position> RESULT = null;
                int mleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int mright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Object m = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Object> value();
                int nleft = CUP$InterfaceParser$stack.peek().left;
                int nright = CUP$InterfaceParser$stack.peek().right;
                Object n = CUP$InterfaceParser$stack.peek().<Object> value();
                 RESULT = NumLiteral.of(new Position(mleft, mright), Long.MIN_VALUE); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("literal",36, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // literal ::= STRING 
            {
                Expr<Position> RESULT = null;
                int sleft = CUP$InterfaceParser$stack.peek().left;
                int sright = CUP$InterfaceParser$stack.peek().right;
                String s = CUP$InterfaceParser$stack.peek().<String> value();
                 RESULT = StringLiteral.of(new Position(sleft, sright), s); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("literal",36, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // literal ::= CHAR 
            {
                Expr<Position> RESULT = null;
                int cleft = CUP$InterfaceParser$stack.peek().left;
                int cright = CUP$InterfaceParser$stack.peek().right;
                Character c = CUP$InterfaceParser$stack.peek().<Character> value();
                 RESULT = CharLiteral.of(new Position(cleft, cright), c); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("literal",36, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // literal ::= TRUE 
            {
                Expr<Position> RESULT = null;
                int bleft = CUP$InterfaceParser$stack.peek().left;
                int bright = CUP$InterfaceParser$stack.peek().right;
                Object b = CUP$InterfaceParser$stack.peek().<Object> value();
                 RESULT = BoolLiteral.of(new Position(bleft, bright), true); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("literal",36, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // literal ::= FALSE 
            {
                Expr<Position> RESULT = null;
                int bleft = CUP$InterfaceParser$stack.peek().left;
                int bright = CUP$InterfaceParser$stack.peek().right;
                Object b = CUP$InterfaceParser$stack.peek().<Object> value();
                 RESULT = BoolLiteral.of(new Position(bleft, bright), false); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("literal",36, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // literal ::= LBRACE expr_star RBRACE 
            {
                Expr<Position> RESULT = null;
                int lleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int lright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Object l = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Object> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<Expr<Position>> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<Expr<Position>>> value();
                 RESULT = ArrayLiteral.of(new Position(lleft, lright), e); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("literal",36, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // literal ::= LBRACE expr_plus COMMA RBRACE 
            {
                Expr<Position> RESULT = null;
                int lleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).left;
                int lright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).right;
                Object l = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3).<Object> value();
                int eleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int eright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<Expr<Position>> e = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<Expr<Position>>> value();
                 RESULT = ArrayLiteral.of(new Position(lleft, lright), e); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("literal",36, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // binop ::= expr MINUS expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e2right);
	   RESULT = BinOp.of(p, BinOpCode.MINUS, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // binop ::= expr STAR expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e2right);
	   RESULT = BinOp.of(p, BinOpCode.STAR, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // binop ::= expr HIGHMULT expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e2right);
	   RESULT = BinOp.of(p, BinOpCode.HIGHMULT, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // binop ::= expr DIV expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e2right);
	   RESULT = BinOp.of(p, BinOpCode.DIV, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // binop ::= expr MOD expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.MOD, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // binop ::= expr PLUS expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.PLUS, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // binop ::= expr LT expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.LT, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // binop ::= expr LTE expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.LTE, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // binop ::= expr GTE expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.GTE, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // binop ::= expr GT expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.GT, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // binop ::= expr EQEQ expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.EQEQ, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // binop ::= expr NEQ expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.NEQ, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // binop ::= expr AMP expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.AMP, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // binop ::= expr BAR expr 
            {
                Expr<Position> RESULT = null;
                int e1left = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e1right = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                Expr<Position> e1 = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<Expr<Position>> value();
                int e2left = CUP$InterfaceParser$stack.peek().left;
                int e2right = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e2 = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(e1left, e1right);
	   RESULT = BinOp.of(p, BinOpCode.BAR, e1, e2); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("binop",33, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // unop ::= BANG expr 
            {
                Expr<Position> RESULT = null;
                int bleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int bright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Object b = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Object> value();
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(bleft, bright);
	  RESULT = UnOp.of(p, UnOpCode.BANG, e); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("unop",34, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // unop ::= MINUS expr 
            {
                Expr<Position> RESULT = null;
                int uleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int uright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                Object u = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<Object> value();
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 Position p = new Position(uleft, uright);
	   RESULT = UnOp.of(p, UnOpCode.UMINUS, e); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("unop",34, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // expr_star ::= 
            {
                ArrayList<Expr<Position>> RESULT = null;
                 RESULT = new ArrayList<Expr<Position>>(); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr_star",41, CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // expr_star ::= expr_plus 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int e_lstleft = CUP$InterfaceParser$stack.peek().left;
                int e_lstright = CUP$InterfaceParser$stack.peek().right;
                ArrayList<Expr<Position>> e_lst = CUP$InterfaceParser$stack.peek().<ArrayList<Expr<Position>>> value();
                 RESULT = e_lst; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr_star",41, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // expr_plus ::= expr 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 ArrayList<Expr<Position>> list = new ArrayList<>();
	   list.add(e);
	   RESULT = list; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr_plus",42, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // expr_plus ::= expr_plus COMMA expr 
            {
                ArrayList<Expr<Position>> RESULT = null;
                int e_lstleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int e_lstright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<Expr<Position>> e_lst = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<Expr<Position>>> value();
                int eleft = CUP$InterfaceParser$stack.peek().left;
                int eright = CUP$InterfaceParser$stack.peek().right;
                Expr<Position> e = CUP$InterfaceParser$stack.peek().<Expr<Position>> value();
                 e_lst.add(e);
	   RESULT = e_lst;
	
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("expr_plus",42, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // avar_plus ::= avar 
            {
                ArrayList<AnnotatedVar<Position>> RESULT = null;
                int avleft = CUP$InterfaceParser$stack.peek().left;
                int avright = CUP$InterfaceParser$stack.peek().right;
                AnnotatedVar<Position> av = CUP$InterfaceParser$stack.peek().<AnnotatedVar<Position>> value();
                 ArrayList<AnnotatedVar<Position>> list = new ArrayList<>();
	   list.add(av);
	   RESULT = list; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("avar_plus",43, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // avar_plus ::= avar_plus COMMA avar 
            {
                ArrayList<AnnotatedVar<Position>> RESULT = null;
                int a_lstleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int a_lstright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<AnnotatedVar<Position>> a_lst = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<AnnotatedVar<Position>>> value();
                int avleft = CUP$InterfaceParser$stack.peek().left;
                int avright = CUP$InterfaceParser$stack.peek().right;
                AnnotatedVar<Position> av = CUP$InterfaceParser$stack.peek().<AnnotatedVar<Position>> value();
                 a_lst.add(av);
	   RESULT = a_lst; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("avar_plus",43, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // var_plus ::= var 
            {
                ArrayList<Var<Position>> RESULT = null;
                int vleft = CUP$InterfaceParser$stack.peek().left;
                int vright = CUP$InterfaceParser$stack.peek().right;
                Var<Position> v = CUP$InterfaceParser$stack.peek().<Var<Position>> value();
                 ArrayList<Var<Position>> list = new ArrayList<>();
	   list.add(v);
	   RESULT = list; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("var_plus",44, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // var_plus ::= var_plus COMMA var 
            {
                ArrayList<Var<Position>> RESULT = null;
                int v_lstleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int v_lstright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<Var<Position>> v_lst = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<Var<Position>>> value();
                int vleft = CUP$InterfaceParser$stack.peek().left;
                int vright = CUP$InterfaceParser$stack.peek().right;
                Var<Position> v = CUP$InterfaceParser$stack.peek().<Var<Position>> value();
                 v_lst.add(v);
	   RESULT = v_lst; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("var_plus",44, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // type_plus ::= type 
            {
                ArrayList<Type<Position>> RESULT = null;
                int tleft = CUP$InterfaceParser$stack.peek().left;
                int tright = CUP$InterfaceParser$stack.peek().right;
                Type<Position> t = CUP$InterfaceParser$stack.peek().<Type<Position>> value();
                 ArrayList<Type<Position>> list = new ArrayList<>();
	   list.add(t);
	   RESULT = list; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("type_plus",45, CUP$InterfaceParser$stack.peek(), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // type_plus ::= type_plus COMMA type 
            {
                ArrayList<Type<Position>> RESULT = null;
                int t_lstleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).left;
                int t_lstright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).right;
                ArrayList<Type<Position>> t_lst = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2).<ArrayList<Type<Position>>> value();
                int tleft = CUP$InterfaceParser$stack.peek().left;
                int tright = CUP$InterfaceParser$stack.peek().right;
                Type<Position> t = CUP$InterfaceParser$stack.peek().<Type<Position>> value();
                 t_lst.add(t);
	   RESULT = t_lst; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("type_plus",45, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // stmt_star ::= 
            {
                ArrayList<Stmt<Position>> RESULT = null;
                 RESULT = new ArrayList<Stmt<Position>>(); 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("stmt_star",46, CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // stmt_star ::= stmt_star full_stmt 
            {
                ArrayList<Stmt<Position>> RESULT = null;
                int s_lstleft = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).left;
                int s_lstright = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).right;
                ArrayList<Stmt<Position>> s_lst = CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1).<ArrayList<Stmt<Position>>> value();
                int sleft = CUP$InterfaceParser$stack.peek().left;
                int sright = CUP$InterfaceParser$stack.peek().right;
                Stmt<Position> s = CUP$InterfaceParser$stack.peek().<Stmt<Position>> value();
                 s_lst.add(s);
	   RESULT = s_lst; 
                CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("stmt_star",46, CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1), CUP$InterfaceParser$stack.peek(), RESULT);
            }
            return CUP$InterfaceParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$InterfaceParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$InterfaceParser$do_action(
            int                        CUP$InterfaceParser$act_num,
            java_cup.runtime.lr_parser CUP$InterfaceParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$InterfaceParser$stack,
            int                        CUP$InterfaceParser$top)
            throws java.lang.Exception {
            return CUP$InterfaceParser$do_action_part00000000(
                           CUP$InterfaceParser$act_num,
                           CUP$InterfaceParser$parser,
                           CUP$InterfaceParser$stack,
                           CUP$InterfaceParser$top);
    }
}

}
