(* flag information -- only ones we care about*)
- cf: carry flag
- zf: zero flag
- sf: sign flag
- of: overflow flag

(* arithmetic instructions *)
- addq arg1 arg2
  * arg2 = arg1 + arg2
  * arg1 can be a 32 bit immediate
- subq arg1 arg2
  * arg2 = arg2 - arg1
  * arg1 can be a 32 bit immediate
- incq arg1
  * arg1 = arg1 + 1
- decq arg1
  * arg1 = arg1 - 1
- negq arg1
  * arg1 = - arg1
- imulq arg1
  * rax (lower 64 bits) = al (lower 8 bits of rax) * arg1
  * rdx (higher 64 bits) = al (lower 8 bits of rax) * arg1
- idivq arg1
  * rdx = (rdx:rax) % arg1 
  * rax = (rdx:rax) / arg1
  
(* logical/bitwise operations *)
- andq arg1 arg2
  * arg2 = arg1 & arg2
  * arg1 can be a 32 bit immediate
- orq arg1 arg2
  * arg2 = arg1 | arg2 
  * arg1 can be a 32 bit immediate
- xorq arg1 arg2
  * arg2 = arg1 ^ arg2
  * arg1 can be a 32 bit immediate

(* bit test operation *)
- bt arg1 arg2
  * cf (carry flag) = bit(arg1 - bit base, arg2 - bit offset) 
  * essentially gets the bit of arg2 at position arg1
  
(* shift operations *)
- shlq cl arg1
  * arg1 = arg1 << cl
  * cl can also be a 8 bit immediate
- shrq cl arg1
  * arg1 = arg1 >> cl
  * cl can also be a 8 bit immediate
- sarq cl arg1
  * arg1 = arg1 >>> cl
  * cl can also be a 8 bit immediate

(* moving/setting operations *)
- mov arg1 arg2
  * arg2 = arg1
  * arg1 can be a 64 bit immediate
- movq arg1 arg2
  * arg2 = arg2
(* for sets arg1 needs to a 8 bit register *)
- sete arg1
  * set if zf = 1
- setne arg1
  * set if zf = 0
- setl arg1
  * set if sf != of
- setg arg1
  * set if zf = 0 and sf = of
- setle arg1
  * set if zf = 1 and sf != of
- setge arg1
  * set if sf = of
- setz arg1
  * set if zf = 1
- setnz arg1
  * set if zf = 0
- sets arg1
  * set if sf = 1
- setns arg1
  * set if sf = 0
- setc arg1
  * set if cf = 1
- setnc arg1
  * set if cf = 0

(* load effective address operation *)
- leaq arg1 arg2
  * arg2 = address of arg1
  * arg2 needs to be a register

(* comparison operations *)
- cmpq arg1 arg2
  * computes arg2 - arg1 and sets cf, of, sf, zf, af and pf flags accordingly
  * arg1 can be a 32 bit immediate

(* test operation *)
- test arg1 arg2
  * computes arg1 & arg2 and sets sf, zf and pf flags accordingly
  * of and cf flags are set to 0

(* stack operations *)
- push/pushq arg1
  * arg1 can be a 32 bit immediate
  * pushes arg1 to the top of the stack and decrements stack pointer
- pop arg1 
  * loads the value from top of stack to arg1 and increments stack pointer
- enter arg1 arg2
  * creates stack frame for a procedure
  * arg1 is 16 bit immediate
  * arg2 is 0, 1 or 8 bit immediate
  * arg1 is number of bytes allocated on stack
  * arg2 is nesting level of a procedure (* used for nested functions *)

(* jump operations *)
(* for jumps arg1 is relative addresses
   also assuming that relative addresses are near *)
- jmp arg1
  * jumps to address arg1
- je arg1
  * if zf = 1 then jump to address arg1
- jne arg1 
  * if zf = 0 then jump to address arg1
- jnz arg1
  * if zf = 0 then jump to address arg1
- jz arg1 
  * if zf = 1 then jump to address arg1
- jg arg1 
  * if zf = 0 and sf = of then jump to address arg1
- jge arg1 
  * if sf = of then jump to address arg1
- jl arg1 
  * if sf != of then jump to address arg1
- jle arg1 
  * if zf = 1 or sf != of then jump to address arg1
- js arg1 
  * if sf = 1 then jump to address arg1
- jns arg1 
  * if sf = 0 then jump to address arg1
- jc arg1 
  * if cf = 1 then jump to address arg1
- jnc arg1 
  * if cf = 0 then jump to address arg1
- call arg1
  * arg1 is either a relative address or register/mem location that contains relative address

(* leave operation *)
- leave
  * releases stack frame set up by enter instruction
  * copies over frame pointer to ebp
  * restores frame pointer to old frame pointer

(* return operation *)
- ret
  * program control to return address at the top of stack
